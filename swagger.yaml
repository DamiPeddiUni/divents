openapi: 3.0.0
info:
  version: '1.0'
  title: "divents OpenAPI"
  description: API to manage events.
  license:
    name: MIT
servers:
  - url: http://localhost:3000/
paths:
  /getEventsList:
    get:
      summary: Get the events list
      description: >-
        Gets the events list.
      parameters:
      - name: "num_result"
        in: "query"
        description: "Number of events to display"
        required: true
      responses:
        '200':
          description: 'Collection of events'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
                  
                  
  /getEventDetails/{eventID}:
    get:
      summary: Get the event details.
      description: >-
        Gets more details about an Event
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true
      responses:
        '200':
          description: 'Details of the event'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /createEvent:
    post:
      summary: Create a new event
      description: >-
        Creates and publishes a new event.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - brief_descr
                - detailed_descr
                - requirements
                - key_words
                - location_name
                - address
                - latitude
                - longitude
                - date
                - photos
                - max_subscribers
              properties:
                title:
                  type: string
                  description: 'Name of the event'
                brief_descr:
                  type: string
                  description: 'Brief description of the event'
                detailed_descr:
                  type: string
                  description: 'Detailed description of the event'
                requirements:
                  type: string
                  description: 'Requirements to access the event'
                key_words:
                  type: array
                  description: 'List of key words of the event'
                location_name:
                  type: string
                  description: 'Name of the location of the event'
                address:
                  type: string
                  description: 'Address where the event takes place'
                latitude:
                  type: string
                  description: 'Latitude where the event takes place'
                longitude:
                  type: string
                  description: 'Longitude where the event takes place'
                date:
                  type: string
                  description: 'Date when the event takes place'
                photos:
                  type: array
                  description: 'Photo of the location'
                max_subscribers:
                  type: integer
                  description: 'Numbers of allowed partecipants to the event'
      responses:
        '201':
          description: "Event created successfully."
          
  /addReservation/{eventID}:
    post:
      summary: Add a reservation for an event
      description: >-
        Add a reservation mapping a user to an event with a unique code.
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true
                
      responses:
        '201':
          description: "Reservation added successfully"
          
  /getUserTakingPart/{eventID}:
    get:
      summary: Check if a user is taking part to an event
      description: >-
        Checking if a user is taking part to an event.
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true
      
      responses:
        '200':
          description: "Reservation added successfully"
    
  /checkUserAuth/{userID}:
    get:
      summary: Check the user's authentication status
      description: >-
        Verifies if the user's profile is completed or not.
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of the User"
        required: true
      responses:
        '200':
          description: 'Succesfully verified.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - profile_completed
                properties:
                  profile_completed:
                    type: boolean
                    description: "Contain the information about the completeness of the profile"
  
  
  /registerUser:
    post:
      summary: Register a new user
      description: >-
        Complete the profile of the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - type
                - profile_photo
                - brief_presentation
                - location
              properties:
                name:
                  type: string
                  description: "Name of the user"
                email:
                  type: string
                  description: "Email of the user"
                type:
                  type: integer
                  description: "Type of user (event manager or private user"
                profile_photo:
                  type: string
                  description: "Profile picture"
                brief_presentation:
                  type: string
                  description: "Brief presentation of the user"
                location :
                  type: string
                  description: "Name of the location where the event takes place"
      responses:
        '201':
          description: "Information compiled successfully."
          content:
            application/json:
              schema:
                type: object
                required:
                  - profile_completed
                properties:
                  profile_completed:
                    type: boolean
                    description: "Information about the completeness of the profile."
        '400':
          description: "Bad Request"
        '500':
          description: "Server error"
    
  /checkReservation/{eventID}:
    get:
      summary: Check the reservation
      description: >-
        Verifies if a reservation is correct or not.
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - qrCode
              properties:
                qrCode: 
                  type: string
                  description: "QR code of the reservation"
      responses:
        '200':
          description: 'Succesfully verified.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    description: "Contains the information about the check result"
  
  /isEventManager/{eventID}:
    get:
      summary: Return if the user is the event manager
      description: Check if the user is the creator of the event.
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true
      responses:
        '200':
          description: 'Succesfully verified.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - isCreator
                properties:
                  isCreator:
                    type: boolean
                    description: "Contains the information about the check result"
        '400':
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - isCreator
                properties:
                  isCreator:
                    type: boolean
                    description: "Contains the information about the check result"
        '403':
          description: 'Authorization denied.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - isCreator
                properties:
                  isCreator:
                    type: boolean
                    description: "Contains the information about the check result"
        '500':
          description: 'Server error.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - isCreator
                properties:
                  isCreator:
                    type: boolean
                    description: "Contains the information about the check result"
                    
  /deleteEvent/{eventID}:
    delete:
      summary: Delete Event
      description: >-
        Deletes an event if the user is the event creator.
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true
      responses:
          '201':
            description: "Event deleted successfully."
            content:
              application/json:
                schema:
                  type: object
                  required:
                    - deleted
                  properties:
                    deleted:
                      type: boolean
                      description: "Contains the information about the deletion result"
  
  /getPartecipantsList/{eventID}:
    get:
      summary: Get the partecipants list
      description: Returns the list of partecipants of a specific event
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the Event"
        required: true

      responses:
        '200':
          description: 'Array of partecipants'
          content:
            application/json:
              schema:
                type: object
                required:
                  - partecipantsList
                properties:
                  partecipantsList:
                    type: array
                    items: 
                      type: string
                      
  /getUserDetails/{userID}:
    get:
      summary: Get the user's details
      description: Returns a user and it's informations.
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of the User"
        required: true
      responses:
        '200':
          description: 'User found succesfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
  /getSubscriptionsEvents/{userID}:
    get:
      summary: Get the subscriptions list of the user
      description: Returns a list of events where the user has subscibed
      
      responses:
        '200':
          description: "List returned succesfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
                
    
components:
  schemas:
    Event:
      type: object
      required:
        - author
        - title
        - brief_descr
        - detailed_descr
        - requirements
        - key_words
        - location_name
        - address
        - latitude
        - longitude
        - date
        - photos
        - max_subscribers
        - subscribers
        - partecipants
      properties:
        author:
          type: string
          description: 'ID of the creator'
        title:
          type: string
          description: 'Name of the event'
        brief_descr:
          type: string
          description: 'Brief description of the event'
        detailed_descr:
          type: string
          description: 'Detailed description of the event'
        requirements:
          type: string
          description: 'Requirements to access the event'
        key_words:
          type: array
          description: 'List of key words of the event'
        location_name:
          type: string
          description: 'Name of the location of the event'
        address:
          type: string
          description: 'Address where the event takes place'
        latitude:
          type: string
          description: 'Latitude where the event takes place'
        longitude:
          type: string
          description: 'Longitude where the event takes place'
        date:
          type: string
          description: 'Date when the event takes place'
        photos:
          type: array
          description: 'Photo of the location'
        max_subscribers:
          type: integer
          description: 'Numbers of allowed partecipants to the event'
        subscribers:
          type: array
          description: 'List of users who have registered for the event'
        partecipants:
          type: array
          description: 'List of users who have joined the event'
    User:
      type: object
      required:
        - auth_id
        - name
        - email
        - type
        - profile_photo
        - brief_presentation
        - location
        - profile_completed
      properties:
        auth_id:
          type: string
          description: "Authentication token"
        name:
          type: string
          description: "Name of the user"
        email:
          type: string
          description: "Email of the user"
        type:
          type: integer
          description: "Type of user (event manager or private user"
        profile_photo:
          type: string
          description: "Profile picture"
        brief_presentation:
          type: string
          description: "Brief presentation of the user"
        location :
          type: string
          description: "Name of the location where the event takes place"
        profile_completed:
          type: boolean
          description: "Information about the completeness of the profile"
    Reservation:
      type: object
      required:
        - user
        - event
        - qrCode
      properties:
        user: 
          type: string
          description: "ID that uniquely identifies the user in the database"
        event: 
          type: string
          description: "ID that uniquely identifies the event in the database"
        qrCode: 
          type: string
          description: "QR code of the reservation"